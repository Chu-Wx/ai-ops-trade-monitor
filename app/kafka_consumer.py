from kafka import KafkaConsumer
import json
import sqlite3
from datetime import datetime

# ËÆæÁΩÆ Kafka Ê∂àË¥πËÄÖ
consumer = KafkaConsumer(
    'trade-events',
    bootstrap_servers='localhost:9092',
    auto_offset_reset='earliest',
    enable_auto_commit=True,
    group_id='risk-analyzer-group',
    value_deserializer=lambda m: json.loads(m.decode('utf-8'))
)

# ËøûÊé•Êï∞ÊçÆÂ∫ìÔºàÁ¨¨‰∏ÄÊ¨°‰ºöËá™Âä®ÂàõÂª∫Ôºâ
conn = sqlite3.connect("trades.db")
cursor = conn.cursor()

# Âª∫Ë°®ÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
cursor.execute('''
CREATE TABLE IF NOT EXISTS trades (
    trade_id TEXT PRIMARY KEY,
    symbol TEXT,
    amount REAL,
    price REAL,
    timestamp TEXT,
    risk_level TEXT
)
''')
conn.commit()

print("‚úÖ Kafka Consumer is listening for trade-events...")

# Ê∂àË¥πÊï∞ÊçÆ
for message in consumer:
    payload = message.value
    print(f"üì• Received message: {payload}")

    # Â¶ÇÊûúÊòØ‰∏ÄÁªÑ‰∫§ÊòìÔºàÂàóË°®ÔºâÔºåÈÄêÊù°Â§ÑÁêÜ
    if isinstance(payload, list):
        trades = payload
    else:
        trades = [payload]

    for trade in trades:
        amount = trade.get("amount", 0)
        risk_level = "HIGH" if amount > 50000 else "LOW"

        try:
            cursor.execute('''
            INSERT INTO trades (trade_id, symbol, amount, price, timestamp, risk_level)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                trade['trade_id'],
                trade['symbol'],
                trade['amount'],
                trade['price'],
                trade['timestamp'],
                risk_level
            ))
            conn.commit()
            print(f"‚úÖ Stored trade {trade['trade_id']} with risk level: {risk_level}")
        except sqlite3.IntegrityError:
            print(f"‚ö†Ô∏è  Trade {trade['trade_id']} already exists, skipped.")
